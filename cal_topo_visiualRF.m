% Knowing the coordinates (latitude and longitude) of two points on the ridge, the location of the epicenter (latitude and longitude)
% and the coordinates of two stations (latitude and longitude), calculate the apparent velocity of Rayleigh waves
% in RF generated by the combination of terrain/different physical properties
% Written by Yifan Lu, more details can be found in https://doi.org/10.1093/gji/ggac260

function [k_12 k_21] = cal_topo_visiualRF(la_topo1,lo_topo1,la_topo2,lo_topo2,la_sta1,lo_sta1,la_sta2,lo_sta2,evla,evlo,depth_src,V_rayleigh)

degree2km = 6371*2*pi/360;

%% Calculate the time difference between the direct P wave and the two terrain points, and the distance of the surface wave propagation (there may be a problem of near-seismic multi-phase)

[~,topo_deg1] = caldisdeg(evla,evlo,la_topo1,lo_topo1);
[~,topo_deg2] = caldisdeg(evla,evlo,la_topo2,lo_topo2);
P_topo1 = taupTime([],depth_src,'P','deg',topo_deg1);
P_topo2 = taupTime([],depth_src,'P','deg',topo_deg2);
add_1 =  P_topo1.time;
add_2 =  P_topo2.time;
deltat_topo = abs(add_1 - add_2);

%% Calculate the coordinates of the two tangent points and calculate the direction vector of the two surface waves

syms x y;
r = V_rayleigh * deltat_topo / degree2km;

if ( add_1 - add_2 > 0)
    disp("---------------------------Arrive at terrain point 2 first---------------------------");
    flag = 2;
    % Calculate the coordinates of the two tangent points on the surface wave circle according to the geometric relationship
    eq1 = (x-lo_topo2)^2 + (y-la_topo2)^2 - r^2;
    eq2 = (x-lo_topo1)^2 + (y-la_topo1)^2 + r^2 - ((lo_topo1-lo_topo2)^2+(la_topo1-la_topo2)^2);
    [x,y] = solve(eq1,eq2);x = eval(x);y = eval(y);
    vector_rayleigh1 = [x(1)-lo_topo2,y(1)-la_topo2] / norm([x(1)-lo_topo2,y(1)-la_topo2],2) * V_rayleigh;
    vector_rayleigh2 = [x(2)-lo_topo2,y(2)-la_topo2] / norm([x(2)-lo_topo2,y(2)-la_topo2],2) * V_rayleigh;
elseif ( add_1 - add_2  < 0)
    disp("---------------------------Arrive at terrain point 1 first---------------------------");
    flag = 1;
    % Calculate the coordinates of the two tangent points on the surface wave circle according to the geometric relationship
    eq1 = (x-lo_topo1)^2+(y-la_topo1)^2 - r^2;
    eq2 = (x-lo_topo2)^2+(y-la_topo2)^2 + r^2 - ((lo_topo1-lo_topo2)^2+(la_topo1-la_topo2)^2);
    [x,y] = solve(eq1,eq2);x = eval(x);y = eval(y);
    vector_rayleigh1 = [x(1)-lo_topo1,y(1)-la_topo1] / norm([x(1)-lo_topo1,y(1)-la_topo1],2) * V_rayleigh;
    vector_rayleigh2 = [x(2)-lo_topo1,y(2)-la_topo1] / norm([x(2)-lo_topo1,y(2)-la_topo1],2) * V_rayleigh;
else
    disp("-------------------------Arrive at the same time, the probability is very small-------------------------");
    flag = 3;
    eq1 = (lo_topo1 - lo_topo2) * (lo_topo1 - x) + (la_topo1 - la_topo2) * (la_topo1 - y);
    eq2 = (x - lo_topo1)^2 + (y - la_topo1)^2 - 1;
    [x,y] = solve(eq1,eq2);x = eval(x);y = eval(y);
    vector_rayleigh1 = [x(1)-lo_topo1,y(1)-la_topo1] / norm([x(1)-lo_topo1,y(1)-la_topo1],2) * V_rayleigh;
    vector_rayleigh2 = [x(2)-lo_topo1,y(2)-la_topo1] / norm([x(2)-lo_topo1,y(2)-la_topo1],2) * V_rayleigh;
end

%% Calculate the apparent velocity along the sta1=>sta2 direction and the apparent velocity in the sta2=>sta1 direction

vector_sta = [lo_sta2 - lo_sta1,la_sta2 - la_sta1];
if ( dot(vector_sta,vector_rayleigh1) >= 0 )
    rayleigh_12 = V_rayleigh^2 / (dot(vector_sta*degree2km,vector_rayleigh1)/norm(vector_sta*degree2km,2));
    rayleigh_21 = V_rayleigh^2 / (dot(vector_sta*degree2km,vector_rayleigh2)/norm(vector_sta*degree2km,2));
else
    rayleigh_12 = V_rayleigh^2 / (dot(vector_sta*degree2km,vector_rayleigh2)/norm(vector_sta*degree2km,2));
    rayleigh_21 = V_rayleigh^2 / (dot(vector_sta*degree2km,vector_rayleigh1)/norm(vector_sta*degree2km,2));
end

%% Calculate the apparent velocity of the direct P wave, from sta1 to sta2 is positive, otherwise it is negative

[~,sta_deg1] = caldisdeg(evla,evlo,la_sta1,lo_sta1);
[~,sta_deg2] = caldisdeg(evla,evlo,la_sta2,lo_sta2);
P_sta1 = taupTime([],depth_src,'P','deg',sta_deg1);
P_sta2 = taupTime([],depth_src,'P','deg',sta_deg2);
add_3 = P_sta1.time;
add_4 = P_sta2.time;
delta_t = abs(add_3 - add_4);
[dis_sta,~] = caldisdeg(la_sta1,lo_sta1,la_sta2,lo_sta2);
if (add_3 - add_4 > 0)
    p_12 = -dis_sta/delta_t;
elseif (add_3 - add_4 < 0)
    p_12 = dis_sta/delta_t;
else
    p_12 = 10000000000;
end

%% Calculate the slope of the event axis of the surface wave in the receiver function (from sta1=>sta2 and from sta2=>sta1)

if ( p_12 > 0 )
    k_12 = 1 / (1/rayleigh_12 - 1/p_12);
    k_21 = 1 / (1/abs(rayleigh_21) + 1/p_12);
else
    k_12 = 1 / (1/rayleigh_12 + 1/abs(p_12));
    k_21 = 1 / (1/abs(rayleigh_21) - 1/abs(p_12));
end

%% ======================================================== On-screen display ========================================================

fprintf("\n----------------------------output£º----------------------------\n");
fprintf("The velocity of the Rayleigh surface wave = %.4f km/s\n",V_rayleigh);
fprintf("-----------------------------------------------------------------\n");
fprintf("Surface wave apparent velocity along the direction of sta1 => sta2 =  %f km/s(always positive)\n",rayleigh_12);
fprintf("-----------------------------------------------------------------\n");
fprintf("Surface wave apparent velocity along the direction of sta2 => sta1 = %f km/s(always negative)\n",rayleigh_21);
fprintf("-----------------------------------------------------------------\n");
fprintf("P-wave apparent velocity along the sta1 => sta2 direction (negative numbers indicate the opposite direction) = %f km/s\n",p_12);
fprintf("-----------------------------------------------------------------\n");
fprintf("k12 (slope towards sta2) = %.4f\n",k_12);
fprintf("-----------------------------------------------------------------\n");
fprintf("k21 (slope towards sta1) = %.4f\n",k_21);
fprintf("-----------------------------------------------------------------\n");

